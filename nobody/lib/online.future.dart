// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// FutureGenerator
// **************************************************************************

/// CODE GENERATED BY NOMOCODE
/// DO NOT EDIT

/// IMPORTING ORIGINAL SOURCE
import 'package:nobody/references.dart';

/// GENERATED EXTENSION
extension ExOnline on Future<Online> {
  Future<Page> lastPage() async {
    var Online = await this;
    return Online.lastPage();
  }

  Future<Online> login(
    authable,
  ) async {
    var Online = await this;
    return Online.login(
      authable,
    );
  }

  Future<Online> visit(
    url,
  ) async {
    var Online = await this;
    return Online.visit(
      url,
    );
  }

  Future<Online> goto(
    url,
  ) async {
    var Online = await this;
    return Online.goto(
      url,
    );
  }

  Future<Online> set(
    selector,
    text,
  ) async {
    var Online = await this;
    return Online.set(
      selector,
      text,
    );
  }

  Future<Online> type(
    selector,
    text,
  ) async {
    var Online = await this;
    return Online.type(
      selector,
      text,
    );
  }

  Future<Online> click(
    selector,
  ) async {
    var Online = await this;
    return Online.click(
      selector,
    );
  }

  Future<Online> waitFor(
    waitable,
  ) async {
    var Online = await this;
    return Online.waitFor(
      waitable,
    );
  }

  Future<Online> close() async {
    var Online = await this;
    return Online.close();
  }

  Future<Online> screenshot(
    path,
  ) async {
    var Online = await this;
    return Online.screenshot(
      path,
    );
  }

  Future<Online> scrollToElement(
    selector,
  ) async {
    var Online = await this;
    return Online.scrollToElement(
      selector,
    );
  }

  Future<Online> scrollBy(
    x,
    y,
  ) async {
    var Online = await this;
    return Online.scrollBy(
      x,
      y,
    );
  }

  Future<String?> get_value(
    selector,
    property,
  ) async {
    var Online = await this;
    return Online.get_value(
      selector,
      property,
    );
  }

  Future<dynamic> evaluate(
    script,
  ) async {
    var Online = await this;
    return Online.evaluate(
      script,
    );
  }

  Future<List<Page>> pages() async {
    var Online = await this;
    return Online.pages();
  }

  Future<Page> newPage() async {
    var Online = await this;
    return Online.newPage();
  }

  Future<Page> get_page(
    index,
  ) async {
    var Online = await this;
    return Online.get_page(
      index,
    );
  }

  Future<Online> close_page(
    index,
  ) async {
    var Online = await this;
    return Online.close_page(
      index,
    );
  }

  Future<Online> close_all_pages() async {
    var Online = await this;
    return Online.close_all_pages();
  }

  Future<Online> close_all_other_pages() async {
    var Online = await this;
    return Online.close_all_other_pages();
  }
}
