// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// FutureGenerator
// **************************************************************************

/// CODE GENERATED BY NOMOCODE
/// DO NOT EDIT

/// IMPORTING ORIGINAL SOURCE
import 'package:nobody/references.dart';

/// GENERATED EXTENSION
extension ExOnline on Future<Online> {
  Future<Page> lastPage() async {
    var Online = await this;
    return Online.lastPage();
  }

  Future<Online> log_requests() async {
    var Online = await this;
    return Online.log_requests();
  }

  Future<Online> artificial_delay() async {
    var Online = await this;
    return Online.artificial_delay();
  }

  Future<Online> log_clicks() async {
    var Online = await this;
    return Online.log_clicks();
  }

  Future<Online> log_responses() async {
    var Online = await this;
    return Online.log_responses();
  }

  Future<Online> login(
    Authable authable, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.login(
      authable,
      show: show,
    );
  }

  Future<Online> visit(
    String url, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.visit(
      url,
      show: show,
    );
  }

  Future<Online> goto(
    AbstractUrl url, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.goto(
      url,
      show: show,
    );
  }

  Future<Online> navigate(
    String url, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.navigate(
      url,
      show: show,
    );
  }

  Future<Online> set(
    AbstractSelector selector,
    String text, {
    bool show = true,
    Duration? timeout = null,
    int index = 0,
  }) async {
    var Online = await this;
    return Online.set(
      selector,
      text,
      show: show,
      timeout: timeout,
      index: index,
    );
  }

  Future<Online> set_secret(
    AbstractSelector selector,
    String text, {
    Duration? timeout = null,
    int index = 0,
  }) async {
    var Online = await this;
    return Online.set_secret(
      selector,
      text,
      timeout: timeout,
      index: index,
    );
  }

  Future<Online> set_range(
    AbstractSelector selector,
    String from,
    String to, {
    Duration? timeout = null,
    bool log = true,
  }) async {
    var Online = await this;
    return Online.set_range(
      selector,
      from,
      to,
      timeout: timeout,
      log: log,
    );
  }

  Future<Online> type(
    String selector,
    String text,
  ) async {
    var Online = await this;
    return Online.type(
      selector,
      text,
    );
  }

  Future<Online> when(
    Waitable waitable,
    dynamic Function(Online) action, {
    Duration? timeout = null,
  }) async {
    var Online = await this;
    return Online.when(
      waitable,
      action,
      timeout: timeout,
    );
  }

  Future<Online> ex(
    dynamic Function(ElementHandle) script, {
    List<dynamic>? args = null,
  }) async {
    var Online = await this;
    return Online.ex(
      script,
      args: args,
    );
  }

  Future<Online> focus(
    AbstractSelector selector, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.focus(
      selector,
      show: show,
    );
  }

  Future<Online> when_contains(
    String selector,
    String text,
    dynamic Function(ElementHandle) action,
  ) async {
    var Online = await this;
    return Online.when_contains(
      selector,
      text,
      action,
    );
  }

  Future<Online> click(
    AbstractSelector selector, {
    bool show = true,
    int index = 0,
  }) async {
    var Online = await this;
    return Online.click(
      selector,
      show: show,
      index: index,
    );
  }

  Future<Online> press(
    Key key, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.press(
      key,
      show: show,
    );
  }

  Future<Online> submit(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.submit(
      selector,
    );
  }

  Future<Online> select_frame(
    String selector,
  ) async {
    var Online = await this;
    return Online.select_frame(
      selector,
    );
  }

  Future<Online> downloadSapTable() async {
    var Online = await this;
    return Online.downloadSapTable();
  }

  Future<Online> right_click(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.right_click(
      selector,
    );
  }

  Future<Online> click_on_context_menu_item(
    String text,
  ) async {
    var Online = await this;
    return Online.click_on_context_menu_item(
      text,
    );
  }

  Future<Online> double_click(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.double_click(
      selector,
    );
  }

  Future<Online> hover(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.hover(
      selector,
    );
  }

  Future<Online> middle_click(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.middle_click(
      selector,
    );
  }

  Future<Online> key_down(
    Key key, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.key_down(
      key,
      show: show,
    );
  }

  Future<Online> key_up(
    Key key, {
    bool show = true,
  }) async {
    var Online = await this;
    return Online.key_up(
      key,
      show: show,
    );
  }

  Future<Online> fill(
    Map<String, dynamic> map, {
    AbstractSelector? form = null,
  }) async {
    var Online = await this;
    return Online.fill(
      map,
      form: form,
    );
  }

  Future<Online> waitFor(
    AbstractSelector waitable, {
    Duration? timeout = null,
  }) async {
    var Online = await this;
    return Online.waitFor(
      waitable,
      timeout: timeout,
    );
  }

  Future<Online> wait(
    Waitable waitable,
  ) async {
    var Online = await this;
    return Online.wait(
      waitable,
    );
  }

  Future<Online> close() async {
    var Online = await this;
    return Online.close();
  }

  Future<Online> screenshot(
    String path,
  ) async {
    var Online = await this;
    return Online.screenshot(
      path,
    );
  }

  Future<Online> download(
    AbstractDownloadable downloadable,
    AbstractPath path,
  ) async {
    var Online = await this;
    return Online.download(
      downloadable,
      path,
    );
  }

  Future<Online> scrollToElement(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.scrollToElement(
      selector,
    );
  }

  Future<Online> scrollBy(
    int x,
    int y,
  ) async {
    var Online = await this;
    return Online.scrollBy(
      x,
      y,
    );
  }

  Future<String?> get_value(
    AbstractSelector selector,
    String property,
  ) async {
    var Online = await this;
    return Online.get_value(
      selector,
      property,
    );
  }

  Future<dynamic> evaluate(
    String script, {
    List<dynamic>? properties = null,
    List<dynamic>? args = null,
  }) async {
    var Online = await this;
    return Online.evaluate(
      script,
      properties: properties,
      args: args,
    );
  }

  Future<List<Page>> pages() async {
    var Online = await this;
    return Online.pages();
  }

  Future<Page> newPage() async {
    var Online = await this;
    return Online.newPage();
  }

  Future<Page> get_page(
    int index,
  ) async {
    var Online = await this;
    return Online.get_page(
      index,
    );
  }

  Future<Online> close_page(
    int index,
  ) async {
    var Online = await this;
    return Online.close_page(
      index,
    );
  }

  Future<Online> close_all_pages() async {
    var Online = await this;
    return Online.close_all_pages();
  }

  Future<Online> close_all_other_pages() async {
    var Online = await this;
    return Online.close_all_other_pages();
  }

  Future<Online> list_elements(
    AbstractSelector selector,
  ) async {
    var Online = await this;
    return Online.list_elements(
      selector,
    );
  }

  Future<Online> list_inputs() async {
    var Online = await this;
    return Online.list_inputs();
  }

  Future<Online> list_textareas() async {
    var Online = await this;
    return Online.list_textareas();
  }

  Future<Online> list_buttons() async {
    var Online = await this;
    return Online.list_buttons();
  }

  Future<Online> list_clickable() async {
    var Online = await this;
    return Online.list_clickable();
  }

  Future<Online> list_dropdowns() async {
    var Online = await this;
    return Online.list_dropdowns();
  }

  Future<Online> list_checkboxes() async {
    var Online = await this;
    return Online.list_checkboxes();
  }

  Future<Online> list_radio_buttons() async {
    var Online = await this;
    return Online.list_radio_buttons();
  }

  Future<Online> list_images() async {
    var Online = await this;
    return Online.list_images();
  }

  Future<Online> send_hotkey(
    Key key, {
    List<Key>? modifiers = null,
  }) async {
    var Online = await this;
    return Online.send_hotkey(
      key,
      modifiers: modifiers,
    );
  }
}
