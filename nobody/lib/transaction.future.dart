// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// FutureGenerator
// **************************************************************************

/// CODE GENERATED BY nomo_code GENERATOR. DO NOT EDIT.

/// IMPORTING ORIGINAL SOURCE
import 'transaction.dart';

/// GENERATED EXTENSION
extension ExTransaction on Future<Transaction> {
  Future<Transaction> waitFor(
    Future<bool> Function(Online) waitable,
  ) async {
    var Transaction = await this;
    return Transaction.waitFor(
      waitable,
    );
  }

  Future<Transaction> set(
    String label,
    String value,
  ) async {
    var Transaction = await this;
    return Transaction.set(
      label,
      value,
    );
  }

  Future<Transaction> execute() async {
    var Transaction = await this;
    return Transaction.execute();
  }

  Future<Transaction> export(
    String path,
  ) async {
    var Transaction = await this;
    return Transaction.export(
      path,
    );
  }

  Future<Transaction> waitForDownload(
    String path,
    int timeout,
  ) async {
    var Transaction = await this;
    return Transaction.waitForDownload(
      path,
      timeout,
    );
  }

  Future<Transaction> setRange(
    String label,
    String from,
    String to,
  ) async {
    var Transaction = await this;
    return Transaction.setRange(
      label,
      from,
      to,
    );
  }

  Future<Transaction> clear(
    String label,
  ) async {
    var Transaction = await this;
    return Transaction.clear(
      label,
    );
  }

  Future<Transaction> sets(
    String label,
    List<String> values,
  ) async {
    var Transaction = await this;
    return Transaction.sets(
      label,
      values,
    );
  }

  Future<Transaction> wait(
    Duration timeSpan,
  ) async {
    var Transaction = await this;
    return Transaction.wait(
      timeSpan,
    );
  }

  Future<Transaction> listTables() async {
    var Transaction = await this;
    return Transaction.listTables();
  }

  Future<Transaction> exportTable(
    String path,
    int timeout,
  ) async {
    var Transaction = await this;
    return Transaction.exportTable(
      path,
      timeout,
    );
  }

  Future<Transaction> listenDownloads() async {
    var Transaction = await this;
    return Transaction.listenDownloads();
  }
}
